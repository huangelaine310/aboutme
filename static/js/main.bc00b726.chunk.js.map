{"version":3,"sources":["images/sisyphus_draft.png","images/computer.jpg","Splash.js","Bubbles.js","App.js","ProjectSect.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Splash","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","fade","headerClass","react_default","a","createElement","className","src","sisyphus","alt","Component","theme","createMuiTheme","palette","primary","main","secondary","light","contrastText","App","ThemeProvider","src_Splash","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,+DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,+PC0BzBC,cAnBb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,MAAM,GAHSR,wEAOjB,IAAIS,EAAc,aAGlB,OAFIN,KAAKI,MAAMC,OAAMC,GAAe,SAGlCC,EAAAC,EAAAC,cAAA,UAAQC,UAAWJ,GACjBC,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAUF,UAAU,WAAWG,IAAI,SAC7CN,EAAAC,EAAAC,cAAA,iDAdaK,8BCDCA,6CCIhBC,GCJoBD,YDIZE,YAAe,CAC3BC,QAAS,CACPC,QAAS,CAEPC,KAAM,WAIRC,UAAW,CACTC,MAAO,UACPF,KAAM,UAENG,aAAc,eAqBLC,MAff,WAQE,OACEhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAeT,MAAOA,GACpBR,EAAAC,EAAAC,cAACgB,EAAD,QEzBcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bc00b726.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sisyphus_draft.911d6fe7.png\";","module.exports = __webpack_public_path__ + \"static/media/computer.9e68ef6a.jpg\";","import React, { Component } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport \"./App.css\";\n\nimport sisyphus from \"./images/sisyphus_draft.png\";\n\nclass Splash extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fade: false\n    };\n  }\n  render() {\n    var headerClass = \"App-header\";\n    if (this.state.fade) headerClass += \" fade\";\n\n    return (\n      <header className={headerClass}>\n        <img src={sisyphus} className=\"App-logo\" alt=\"logo\" />\n        <p>Currently Under Construction</p>\n      </header>\n    );\n  }\n}\n\nexport default Splash;\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport \"./App.css\";\nimport sisyphus from \"./images/sisyphus_draft.png\";\n\nclass Bubbles extends Component {\n  constructor(props) {\n    super(props);\n\n    this.minValue = 50;\n    this.maxValue = 100;\n    this.mounted = false;\n\n    this.state = {\n      data: this.props.data,\n      width: window.innerWidth,\n      height: window.innerHeight,\n      hoverId: -1\n    };\n\n    this.radiusScale = this.radiusScale.bind(this);\n    this.simulatePositions = this.simulatePositions.bind(this);\n    this.renderBubbles = this.renderBubbles.bind(this);\n    this.updateDimensions = this.updateDimensions.bind(this);\n  }\n\n  updateDimensions() {\n    this.setState({\n      width: window.innerWidth,\n      height: window.innerHeight\n    });\n  }\n\n  componentWillMount() {\n    this.mounted = true;\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.updateDimensions);\n    if (this.props.data.length > 0) {\n      this.minValue =\n        0.05 *\n        d3.min(this.props.data, item => {\n          return item.value;\n        });\n\n      this.maxValue =\n        1.05 *\n        d3.max(this.props.data, item => {\n          return item.value;\n        });\n\n      this.simulatePositions(this.props.data);\n    }\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  radiusScale = value => {\n    const fx = d3\n      .scaleSqrt()\n      .range([50, 90])\n      .domain([this.minValue, this.maxValue]);\n\n    return fx(value);\n  };\n\n  simulatePositions = data => {\n    this.simulation = d3\n      .forceSimulation()\n      .nodes(data)\n      .velocityDecay(0.5)\n      .force(\"x\", d3.forceX().strength(0.1))\n      .force(\"y\", d3.forceY().strength(0.2))\n      .force(\n        \"collide\",\n        d3.forceCollide(d => {\n          return this.radiusScale(d.value) + 30;\n        })\n      )\n      .on(\"tick\", () => {\n        if (this.mounted) {\n          this.setState({ data });\n        }\n      });\n  };\n\n  renderBubbles = data => {\n    const minValue =\n      0.95 *\n      d3.min(data, item => {\n        return item.value;\n      });\n\n    const maxValue =\n      1.05 *\n      d3.max(data, item => {\n        return item.value;\n      });\n\n    const color = d3\n      .scaleLinear()\n      .domain([minValue, maxValue])\n      .interpolate(d3.interpolateHcl)\n      .range([\"#fc4a1a\", \"#f7b733\"]);\n\n    // render circle and text elements inside a group\n    const texts = this.state.data.map((item, index) => {\n      const width = this.state.width;\n      const height = this.state.height;\n      const fontSize = this.radiusScale(item.value) / 2;\n      if (item.type.valueOf() === \"img\") {\n        return (\n          <g\n            key={index}\n            transform={`translate(${width / 2 + item.x}, ${height / 2 +\n              item.y})`}\n            className=\"bubbleGImg\"\n          >\n            <defs>\n              <pattern\n                id=\"attachedImage\"\n                height=\"100%\"\n                width=\"100%\"\n                patternContentUnits=\"objectBoundingBox\"\n              >\n                <image\n                  xlinkHref={sisyphus}\n                  preserveAspectRatio=\"none\"\n                  width=\"1\"\n                  height=\"1\"\n                />\n              </pattern>\n            </defs>\n            <circle\n              r={this.radiusScale(item.value)}\n              stroke={d3.rgb(color(item.value)).brighter(2)}\n              strokeWidth=\"2\"\n              className=\"bubbleImg\"\n              fill=\"url(#attachedImage)\"\n            />\n          </g>\n        );\n      } else {\n        return (\n          <g\n            key={index}\n            transform={`translate(${this.state.width / 2 + item.x}, ${this.state\n              .height /\n              2 +\n              item.y})`}\n            className=\"bubbleG\"\n          >\n            <circle\n              r={this.radiusScale(item.value)}\n              fill={color(item.value)}\n              stroke={d3.rgb(color(item.value)).darker(2)}\n              strokeWidth=\"2\"\n              className=\"bubble\"\n            />\n            <text\n              dy=\"6\"\n              fill=\"#fff\"\n              textAnchor=\"middle\"\n              fontSize={`${fontSize}px`}\n              fontWeight=\"bold\"\n              className=\"bubbleText\"\n            >\n              {item.name}\n            </text>\n          </g>\n        );\n      }\n    });\n    return texts;\n  };\n\n  render() {\n    if (this.state.data.length) {\n      return (\n        <svg width={this.state.width} height={this.state.height}>\n          {this.renderBubbles(this.state.data)}\n        </svg>\n      );\n    }\n\n    return <div>Loading</div>;\n  }\n}\n\nexport default Bubbles;\n","import React from \"react\";\nimport \"./App.css\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\n\nimport Splash from \"./Splash.js\";\nimport Bubbles from \"./Bubbles.js\";\nimport ProjectSect from \"./ProjectSect.js\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      // light: will be calculated from palette.primary.main,\n      main: \"#ff4400\"\n      // dark: will be calculated from palette.primary.main,\n      // contrastText: will be calculated to contrast with palette.primary.main\n    },\n    secondary: {\n      light: \"#0066ff\",\n      main: \"#0044ff\",\n      // dark: will be calculated from palette.secondary.main,\n      contrastText: \"#ffcc00\"\n    }\n    // error: will use the default color\n  }\n});\n\nfunction App() {\n  let bubbleData = [\n    { id: 0, name: \"About me\", value: 100, type: \"link\" },\n    { id: 1, name: \"Projects\", value: 100, type: \"link\" },\n    { id: 2, name: \"Travel\", value: 90, type: \"link\" },\n    { id: 3, name: \"Recipes\", value: 80, type: \"link\" },\n    { id: 4, name: \"sisyphus\", value: 80, type: \"img\" }\n  ];\n  return (\n    <ThemeProvider theme={theme}>\n      <Splash />\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport computer from \"./images/computer.jpg\";\nimport classNames from \"classnames\";\n\nclass ProjectSect extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      width: window.innerWidth,\n      height: window.innerHeight\n    };\n  }\n\n  render() {\n    const style = {\n      height: this.state.height,\n      width: this.state.width\n    };\n    return (\n      <div className={classNames(\"Section\", \"ProjectSect\")} style={style}>\n        <div className={classNames(\"SectLeft\", \"SectImage\")}>\n          <img src={computer} alt=\"projects\" />\n        </div>\n\n        <div className={classNames(\"SectRight\", \"SectText\")}>\n          <div className=\"SectionText\">\n            <div className=\"SectionHeader\">Projects</div>\n            <div className=\"SectionContent\">\n              Coding is my life. Love it, happy to do it, and will continue to\n              do more. Check out some of the projects I've worked on here.\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ProjectSect;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}